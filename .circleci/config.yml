
version: 2
jobs:
  build:
    docker:
      - image: circleci/golang:1.14
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "go.sum" }}
      - run:
          name: Download dependencies
          command: go mod download
      - save_cache:
          key: dependency-cache-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - run:
          name: Linting
          command: |
            go get -u golang.org/x/lint/golint
            golint -set_exit_status
      - setup_remote_docker
      - run:
          name: Run tests without license
          command: |
            # Spin up environment
            ACCEPT_EULA=yes docker-compose -f docker-compose.only-engine.yml up -d
            CONTAINER_ID=$(docker ps -aqf "name=qix-engine_1")
            TEST_HOST=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.Gateway}}{{end}}' "$CONTAINER_ID")

            # Start a container for test execution
            TEST_CONTAINER=$(docker run -e TEST_HOST=$TEST_HOST -e CGO_ENABLED=0 -d golang:1.12-alpine tail -f /dev/null)
            # Copy dependencies and code into container
            docker cp /go/pkg $TEST_CONTAINER:/go/pkg
            docker cp . $TEST_CONTAINER:/core-using-licenses
            # Sleep for 10s to make sure the license service has contacted the backend.
            sleep 10s
            # Execute tests
            docker exec $TEST_CONTAINER sh -c 'cd /core-using-licenses && go test -timeout 30s ./test/no_license_test.go ./test/utils_test.go -count=1'
            # Bring down the docker-compose and test container
            docker-compose -f docker-compose.only-engine.yml down
            docker kill $TEST_CONTAINER
      - run:
          name: Run tests with license
          command: |
            # Spin up environment
            ACCEPT_EULA=yes docker-compose -f docker-compose.engine-and-license-service.yml up -d
            CONTAINER_ID=$(docker ps -aqf "name=qix-engine_1")
            TEST_HOST=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.Gateway}}{{end}}' "$CONTAINER_ID")

            # Start a container for test execution
            TEST_CONTAINER=$(docker run -e TEST_HOST=$TEST_HOST -e CGO_ENABLED=0 -d golang:1.12-alpine tail -f /dev/null)
            # Copy dependencies and code into container
            docker cp /go/pkg $TEST_CONTAINER:/go/pkg
            docker cp . $TEST_CONTAINER:/core-using-licenses
            # Sleep for 10s to make sure the license service has contacted the backend.
            sleep 10s
            # Execute tests
            docker exec $TEST_CONTAINER sh -c 'cd /core-using-licenses && go test -timeout 30s ./test/with_license_test.go ./test/utils_test.go -count=1'
            # Bring down the docker-compose
            docker-compose -f docker-compose.engine-and-license-service.yml down
            docker kill $TEST_CONTAINER
